/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/*  
    =======Universal Selector=========
    Selectors are a rule which "selects" a html element.

    Universal reset -> rewrite (start over) all html elements, because
    some browsers apply certain properties by default.

    ======QUESTIONS======
 Why css requires a comma to separate the selectors, why does that mean
 and what's the difference with the space.
*/
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  box-sizing: border-box;
}

/*
    Font here
    because the properties of font are inherited.
    this supposed to have a limited scope for forms and inputs
    ====QUESTIONS====
    what is overall
    why !important and why it's dangerous
    why not everything it's important
    why in the body and not in universal or html
*/
body {
  font-family: "Lato", sans-serif !important; /*Cannot be overwritten by other selectors */
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: #777;
  padding: 30px;
}
/*
    == QUESTIONS ==
    what is viewport
    why cover
    how old internet people learnt
*/
.header {
  height: 95vh; /* almost 100% of the width   */
  background-image: linear-gradient(to right bottom, #7ed56fe8, #28b485e8),
    url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  /*
    It's taking 75% of the viewport height, which is the height of a resized window screen.
    ==QUESTION==
    Why 100vh over X axis isn't working as 75vh over Y axis.
  */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /*
    Position:relative will make this as the startcount parent of the absolute attribute for children elements
  */
  position: relative;
}

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
}

.logo {
  height: 35px;
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  margin-bottom: 60px;
}

.heading-primary-main {
  display: block;
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-in;
  /*
  animation-iteration-count: 3;
  animation-delay:1s;
  animation-timing-function: ease-in;
  */
}
.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;
  animation: moveInRight 1s ease-in;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }

  80% {
    transform: translateX(20px);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}
@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }
  80% {
    transform: translateX(-20px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}
/*
pseudoclass !== pseudoelements
link is blue, purple
*/
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  display: inline-block;
  border-radius: 100px;
  position: relative;
  transition: all 0.2s;
}
/*hover*/
.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}
/*click*/
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}
.btn-white {
  background-color: #fff;
  color: #777;
}
/*
shorten animation -> animation-name,-duration,-timing-function
        transition -> all .2s
*/
/*
why after needs content empty
*/
.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 100px;
  position: absolute; /*always search for the relative reference*/
  top: 0;
  left: 0;
  z-index: -1; /*behind primary class*/
  transition: all 0.4s;
}

.btn-white::after {
  background-color: #fff;
}
/*grow only the pseudo when hover
transform: scale(1.5);
*/
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}
